// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  logs      Logs[]
  address   Address[]
}

model Customer {
  id        Int    @id @default(autoincrement())
  firstname String
  lastname  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses  Address[]
  emails     Email[]
  phones     Phone[]
  vehicles   Vehicle[]
  workOrders WorkOrder[]
}

model Email {
  id         Int      @id @default(autoincrement())
  address    String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
}

model Phone {
  id         Int      @id @default(autoincrement())
  prefix     String
  number     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
}

model Address {
  id         Int         @id @default(autoincrement())
  street     String
  number     String
  city       String
  state      String
  country    String
  zip        String
  type       AddressType
  isCurrent  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  customerId Int
  customer   Customer    @relation(fields: [customerId], references: [id])
  User       User        @relation(fields: [userId], references: [id])
  userId     Int
}

enum AddressType {
  BILLING
  HOME
  WORK
  OTHER
}

model WorkOrder {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  status      OrderStatus

  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now())
  customerId Int
  customer   Customer        @relation(fields: [customerId], references: [id])
  items      WorkOrderItem[]
  Vehicle    Vehicle?        @relation(fields: [vehicleId], references: [id])
  vehicleId  Int?
}

enum OrderStatus {
  AWAITING_START
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model WorkOrderItem {
  id          Int       @id @default(autoincrement())
  isService   Boolean
  name        String
  price       Int
  unit        UnitType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workOrderId Int
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
}

enum UnitType {
  GRAM
  LITER
  ITEM
  PACK
}

model Vehicle {
  id         Int         @id @default(autoincrement())
  make       String
  model      String
  vin        String
  vrm        String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Customer   Customer    @relation(fields: [customerId], references: [id])
  customerId Int
  workOrders WorkOrder[]
}

model Logs {
  id        Int      @id @default(autoincrement())
  action    String
  path      String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}
